


-------------------  VALVE  -------------------

tempalte alignment :

OPEN3D
pip uninstall open3d open3d-python
pip3 install open3d==0.12
pip install numpy --upgrade  (1.19.5 works)
http://www.open3d.org/docs/release/tutorial/pipelines/index.html
https://stackoverflow.com/questions/60346126/consistent-normal-calculation-of-a-point-cloud
    orient_normals_consistent_tangent_plane(self, k)
    orient_normals_to_align_with_direction(self, orientation_reference=array([0.0, 0.0, 1.0]))
    orient_normals_towards_camera_location(self, camera_location=array([0.0, 0.0, 0.0]))

OTHER:
https://pcl.readthedocs.io/projects/tutorials/en/latest/template_alignment.html
https://github.com/strawlab/python-pcl/blob/master/examples/official/Registration/alignment_prerejective.py
https://github.com/dakshaau/ICP
https://github.com/agnivsen/icp


DENTRO
D global registration (parametros)
D (color) registration (parametros)
D escoger registration PUNTOS o PLANO
D conseguir CAD valvulas con normales (o calcualralas y que queden bien)
D tiempos matching

FUERA
D centro en 0,0,0
D mirar % time_read para.. ----------------------------------------------------------DONE - AUMENTA UN 8% EL TIMEPO
    - intentar filtrar menos en pc_voxel para subscribirse a mas puntos
    - subsample en python al mismo numero de puntos (10k para 256)
    - pointcloud proj coger la que justo se saca del subscriber, antes de downsamplear, asi sera mas densa
    - esto afectara a tiempo de matching?
D convertir numpy en pointcloud open3d

D generar modelos de valvulas en orgien orientados (CAD / nuestras) 
* get_Info mockup
* bateria de tests difrentes valvulas, diferentes densidades, target CAD / nuestras, tiempos
* integrar en get_info.py (pending to test)
* integrar en pipeline
* gestionar % de matching, descartes, hacer matching 3 veces? dependera de lo que vea en bateria de pruebas

-------------------  PIPE  -------------------

* buscar esqueleto en 3d points
* buscar esqueleto en 2d ponts
* convertir points 2d a imagen 2d
    - coger x y max
    - ver cuandos x e y dsitintos tienes
    - crear imagen de esa resolucion( darle la oportunidad de caer cada 1 en 1 diferente, suponems espaciamentto ams o menos regular)
    - proyectar cada punto en su pixel
    - crear copia antes de ir a blob = 1 para poder calcular despues puntos ams cercanos entre los del esqueleto y las originales proyectados y tener relacion a 3d points
* conseguir 1 solo blob 
    - convex hull ajustandose
    - closings hasta que blob = 1
* esqueleto
* link esqueleto
* relacionar con points 3d
* get info distancias, vectores, 
* descartes
* posiciones pipes, orientacion, inicio, fin, codos,...


